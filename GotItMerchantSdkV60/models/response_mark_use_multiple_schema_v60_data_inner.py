# coding: utf-8

"""
    Merchant APIs

    Technical document APIs for Merchant APIs

    The version of the OpenAPI document: 6.0
    Contact: duong.vu@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from GotItMerchantSdkV60.models.response_check_multiple_schema_v60_data_inner_product import ResponseCheckMultipleSchemaV60DataInnerProduct
from GotItMerchantSdkV60.models.response_check_multiple_schema_v60_data_inner_redeem_sku import ResponseCheckMultipleSchemaV60DataInnerRedeemSku
from GotItMerchantSdkV60.models.response_mark_use_multiple_schema_v60_data_inner_used_store import ResponseMarkUseMultipleSchemaV60DataInnerUsedStore
from typing import Optional, Set
from typing_extensions import Self

class ResponseMarkUseMultipleSchemaV60DataInner(BaseModel):
    """
    ResponseMarkUseMultipleSchemaV60DataInner
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="Voucher code")
    product: Optional[ResponseCheckMultipleSchemaV60DataInnerProduct] = None
    state: Optional[StrictInt] = Field(default=None, description="State of voucher")
    used_date: Optional[StrictStr] = Field(default=None, description="Date voucher marked as used in case the voucher has been redeemed. Format (YYYY-MM-DD HH:MM:SS)")
    used_store: Optional[ResponseMarkUseMultipleSchemaV60DataInnerUsedStore] = None
    voucher_type: Optional[StrictStr] = Field(default=None, description="Voucher type, standard or redeemable_sku")
    skus_condition_vi: Optional[StrictStr] = Field(default=None, description="Voucher SKU terms and conditions description in Vietnamese")
    skus_condition_en: Optional[StrictStr] = Field(default=None, description="Voucher SKU terms and conditions description in English")
    redeem_sku: Optional[ResponseCheckMultipleSchemaV60DataInnerRedeemSku] = None
    redeemable_skus: Optional[List[StrictStr]] = Field(default=None, description="List of redeemable SKUs of the voucher code. For voucher type = redeemable_sku, bill number must contain at least 1 redeemable SKU of the voucher.")
    __properties: ClassVar[List[str]] = ["code", "product", "state", "used_date", "used_store", "voucher_type", "skus_condition_vi", "skus_condition_en", "redeem_sku", "redeemable_skus"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseMarkUseMultipleSchemaV60DataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of product
        if self.product:
            _dict['product'] = self.product.to_dict()
        # override the default output from pydantic by calling `to_dict()` of used_store
        if self.used_store:
            _dict['used_store'] = self.used_store.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redeem_sku
        if self.redeem_sku:
            _dict['redeem_sku'] = self.redeem_sku.to_dict()
        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseMarkUseMultipleSchemaV60DataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "product": ResponseCheckMultipleSchemaV60DataInnerProduct.from_dict(obj["product"]) if obj.get("product") is not None else None,
            "state": obj.get("state"),
            "used_date": obj.get("used_date"),
            "used_store": ResponseMarkUseMultipleSchemaV60DataInnerUsedStore.from_dict(obj["used_store"]) if obj.get("used_store") is not None else None,
            "voucher_type": obj.get("voucher_type"),
            "skus_condition_vi": obj.get("skus_condition_vi"),
            "skus_condition_en": obj.get("skus_condition_en"),
            "redeem_sku": ResponseCheckMultipleSchemaV60DataInnerRedeemSku.from_dict(obj["redeem_sku"]) if obj.get("redeem_sku") is not None else None,
            "redeemable_skus": obj.get("redeemable_skus")
        })
        return _obj


