# coding: utf-8

"""
    Merchant APIs

    Technical document APIs for Merchant APIs

    The version of the OpenAPI document: 6.0
    Contact: duong.vu@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from GotItMerchantSdkV60.models.response_mark_use_multiple_schema_v60_data_inner import ResponseMarkUseMultipleSchemaV60DataInner
from typing import Optional, Set
from typing_extensions import Self

class ResponseMarkUseMultipleSchemaV60(BaseModel):
    """
    ResponseMarkUseMultipleSchemaV60
    """ # noqa: E501
    success: Optional[StrictBool] = None
    return_code: Optional[StrictStr] = Field(default=None, description="Result code if failed. Default is null")
    message_en: Optional[StrictStr] = Field(default=None, description="Message notification in English")
    message_vi: Optional[StrictStr] = Field(default=None, description="Message notification in Vietnamese")
    data: Optional[List[ResponseMarkUseMultipleSchemaV60DataInner]] = Field(default=None, description="Detail items of voucher, if result is failed, response will return the first voucher code which is invalid")
    transaction_id: Optional[StrictStr] = Field(default=None, description="Transaction ID (if mark used successfully)")
    bill_number: Optional[StrictStr] = Field(default=None, description="Bill number that vouchers were marked as used for.")
    __properties: ClassVar[List[str]] = ["success", "return_code", "message_en", "message_vi", "data", "transaction_id", "bill_number"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseMarkUseMultipleSchemaV60 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item_data in self.data:
                if _item_data:
                    _items.append(_item_data.to_dict())
            _dict['data'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseMarkUseMultipleSchemaV60 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "success": obj.get("success"),
            "return_code": obj.get("return_code"),
            "message_en": obj.get("message_en"),
            "message_vi": obj.get("message_vi"),
            "data": [ResponseMarkUseMultipleSchemaV60DataInner.from_dict(_item) for _item in obj["data"]] if obj.get("data") is not None else None,
            "transaction_id": obj.get("transaction_id"),
            "bill_number": obj.get("bill_number")
        })
        return _obj


