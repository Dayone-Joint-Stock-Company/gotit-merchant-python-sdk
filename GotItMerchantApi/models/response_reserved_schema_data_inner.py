# coding: utf-8

"""
    Merchant APIs

    Technical document APIs for Merchant APIs

    The version of the OpenAPI document: 6.0
    Contact: duong.vu@gotit.vn
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from GotItMerchantApi.models.response_mark_use_multiple_schema_data_inner_conditions import ResponseMarkUseMultipleSchemaDataInnerConditions
from GotItMerchantApi.models.response_reserved_schema_data_inner_redemptions import ResponseReservedSchemaDataInnerRedemptions
from typing import Optional, Set
from typing_extensions import Self

class ResponseReservedSchemaDataInner(BaseModel):
    """
    ResponseReservedSchemaDataInner
    """ # noqa: E501
    code: Optional[StrictStr] = Field(default=None, description="Voucher code")
    value: Optional[StrictInt] = Field(default=None, description="Value of voucher")
    state: Optional[StrictInt] = Field(default=None, description="State of voucher")
    product_id: Optional[StrictInt] = Field(default=None, description="Product ID")
    voucher_type: Optional[StrictStr] = Field(default=None, description="Voucher type, standard or conditional")
    conditions: Optional[ResponseMarkUseMultipleSchemaDataInnerConditions] = None
    redemptions: Optional[ResponseReservedSchemaDataInnerRedemptions] = None
    __properties: ClassVar[List[str]] = ["code", "value", "state", "product_id", "voucher_type", "conditions", "redemptions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseReservedSchemaDataInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions:
            _dict['conditions'] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redemptions
        if self.redemptions:
            _dict['redemptions'] = self.redemptions.to_dict()
        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        # set to None if state (nullable) is None
        # and model_fields_set contains the field
        if self.state is None and "state" in self.model_fields_set:
            _dict['state'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['product_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseReservedSchemaDataInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "value": obj.get("value"),
            "state": obj.get("state"),
            "product_id": obj.get("product_id"),
            "voucher_type": obj.get("voucher_type"),
            "conditions": ResponseMarkUseMultipleSchemaDataInnerConditions.from_dict(obj["conditions"]) if obj.get("conditions") is not None else None,
            "redemptions": ResponseReservedSchemaDataInnerRedemptions.from_dict(obj["redemptions"]) if obj.get("redemptions") is not None else None
        })
        return _obj


